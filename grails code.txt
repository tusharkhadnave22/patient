

class Patient {
    String firstName
    String lastName
    Date dateOfBirth
    String sex
    String email
    String ssn
    Date createdAt
    Date updatedAt
    Team team
    Attendant attendant
    static belongsTo=[attendant: Attendant]
    static hasOne = [team: Team]
    static constraints = {
        firstName blank: false
        lastName blank: false
        dateOfBirth nullable: true
        sex inList: ["Male", "Female", "Other"]
        email email: true, unique: true
        ssn nullable: false, blank: false, unique: true
        attendant nullable: true
        createdAt nullable:false
        updatedAt nullable:false
        team nullable: false
        attendant nullable: false
    }
//    static mapping = {
//        dateOfBirth type: 'date'
//        createdAt defaultValue: new Date()
//        updatedAt defaultValue: new Date()
//
//    }
}












class Team {

    String name;
    Integer size;
    Date created_at;
    Date updated_at;

    static hasMany = [attendants: Attendant, patients: Patient]

    static constraints = {
        name nullable:false, blank:false
        size nullable:false, min:1
        created_at nullable:false
        updated_at nullable:false
    }

//    static mapping = {
//        created_at defaultValue: new Date()
//        updated_at defaultValue: new Date()
//    }
}

















class Attendant {
    String name;
    Date created_at;
    Date updated_at;
    //static hasOne = [patient: Patient]
    static belongsTo = [team: Team]
    static constraints = {
        name nullable:false, blank:false
        team nullable:true
        created_at nullable:false
        updated_at nullable:false
    }

//    static mapping = {
//        created_at defaultValue: new Date()
//        updated_at defaultValue: new Date()
//    }
}


def save() {
        def json = request.JSON
        def patient = new Patient(json)
        if (patient.save(flush: true))  {
                render(status: 201, text: "Patient data saved successfully")
            }
            else
            {
                render(status: 400, text: "Failed to save patient data")
            }
        }
    }



{
  "firstName": "John",
  "lastName": "Doe",
  "dateOfBirth": "1990-05-15",
  "sex": "Male",
  "email": "john.doe@example.com",
  "ssn": "123-45-6789",
  "createdAt": "2024-09-13T08:00:00Z",
  "updatedAt": "2024-09-13T08:00:00Z",
  "team": {
    "name": "Development",
    "size": 10,
    "created_at": "2024-01-01T09:00:00Z",
    "updated_at": "2024-09-13T08:00:00Z"
  },
  "attendant": {
    "name": "Jane Smith",
    "created_at": "2024-01-01T09:00:00Z",
    "updated_at": "2024-09-13T08:00:00Z"
  }
}



    runtimeOnly("mysql:mysql-connector-java:8.0.33")


    pooled: true
    driverClassName: com.mysql.cj.jdbc.Driver
    dialect: org.hibernate.dialect.MySQL5InnoDBDialect
    username: root
    password: admin
    url: jdbc:mysql://localhost:3306/patientdb?useSSL=false&serverTimezone=UTC
    dbCreate: update

